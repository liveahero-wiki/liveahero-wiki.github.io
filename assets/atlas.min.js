'use strict';class AtlasStitcher{constructor(){this.canvas=document.createElement("canvas");this.ctx=this.canvas.getContext("2d")}draw(a,b,c,e){const l=a.height,g=a.width;var f=b.width;const h=b.height,k=c.padding;c=c.cellSize;const d=c-2*k,n=f+d-1-(f+d-1)%d,p=h+d-1-(h+d-1)%d;this.canvas.width=f;this.canvas.height=h;this.ctx.clearRect(0,0,f,h);f=0;for(const m of b.cellIndexList){if(m!=b.transparentIndex){const q=f%(n/d)*d,r=p-d*(1+intdiv(f,n/d))-(p-h),t=m%(g/c)*c+k,u=l-c*(1+intdiv(m,g/c))+k;this.ctx.drawImage(a,t,u,d,d,q,r,d,d)}f++}this.canvas.toBlob(m=>{e.src.startsWith("blob")&&URL.revokeObjectURL(e.src);e.src=URL.createObjectURL(m)},"image/png")}}async function getJson(a){return await Promise.all(a.map(b=>fetch(`/cdn/MonoBehaviour/${b}.json`)))}async function collectSprites(a,b){const c={};for(const e of a){if(200!=e.status){console.log(e);continue}a=await e.json();const l=a.m_Name;c[l]=a;for(const g of a.textureDataList)b.add(new Option(g.name,`${l}:${g.name}`))}return c}const atlasObserver=new IntersectionObserver((a,b)=>{a.forEach(c=>{c.isIntersecting&&(atlasHandler(c.target),b.unobserve(c.target))})});function addAprilFoolSprite(a,b){a=a[0].split("_")[1];a=aprilFoolSpriteMap[a];void 0!==a&&(a=`${APRIL_FOOL}:${a}`,b.prepend(new Option(APRIL_FOOL,a)),b.value=a)}async function atlasHandler(a){var b=a.dataset.sprites.split(",");const c=a.querySelector("img"),e=a.querySelector("select");b=await getJson(b);const l=await collectSprites(b,e);a.appendChild(e);a=()=>{const g=e.value.split(":"),f=l[g[0]],h=f.textureDataList.find(d=>d.name==g[1]),k=new Image;k.onload=()=>{window.atlasSticher=window.atlasSticher||new AtlasStitcher;atlasSticher.draw(k,h,f,c)};k.src=`/cdn/Texture2D/${h.atlasName}.png`};a();e.addEventListener("change",a)}document.querySelectorAll(".atlas-gallery").forEach(a=>atlasObserver.observe(a));function intdiv(a,b){return Math.floor(a/b)};